---
- name: Get highest VM number
  delegate_to: localhost
  register: get_vm_id
  script: >
    get_vm_id.py
    --host '{{ vcenter_hostname }}'
    --user '{{ vcenter_username }}'
    --password '{{ vcenter_password }}'
    --vm-name "winci-{{ vm_role }}-"

- name: Set variables used in vmware modules
  set_fact:
    vm_name: "winci-{{ vm_role }}-{{ get_vm_id.stdout.strip() }}"
    vm_annotation: "Template for {{ vm_role }} created on {{ '%Y-%m-%d %H:%M:%S' | strftime(ansible_date_time.epoch) }}"
    vm_folder: "{{ vcenter_datacenter }}/vm/{{ vm_folder }}"

- name: Show VM name
  debug:
    var: vm_name

- name: "Deploy VM from Template"
  register: new_vm
  vmware_guest:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: "{{ vcenter_validate_certs }}"
    datacenter: "{{ vcenter_datacenter }}"
    cluster: "{{ vcenter_cluster }}"

    name: "{{ vm_name }}"
    folder: "{{ vm_folder }}"
    annotation: "{{ vm_annotation }}"
    template: "{{ base_template }}"
    networks: "{{ vm_vars[vm_role].networks }}"
    customization:
      hostname: "{{ vm_name }}"
      fullname: "{{ windows_customization_user }}"
      password: "{{ windows_customization_pass }}"
    state: poweredon
    wait_for_ip_address: yes

# TODO: Windows sysprep initiates a reboot, which is recognized as false positive by wait_for_ip_address.
#       Need to find a better way to handle waiting for customization
- name: Wait for customization to finish
  wait_for:
    timeout: 300

- name: Get correct IP address of new {{ vm_role }}
  register: vm
  vmware_guest_facts:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: "{{ vcenter_validate_certs }}"
    datacenter: "{{ vcenter_datacenter }}"
    uuid: "{{ new_vm.instance.hw_product_uuid }}"
  retries: 60
  delay: 15
  until: >
      vm.instance.hw_eth0.ipaddresses | ipv4 | reject("match", "169.254.*") | list

- debug:
    var: vm

- name: Add host to inventory
  add_host:
    name: "{{ vm_name }}"
    ansible_host: "{{ vm.instance.hw_eth0.ipaddresses | ipv4 | first }}"
    groups: "template,{{ vm_role }}"
